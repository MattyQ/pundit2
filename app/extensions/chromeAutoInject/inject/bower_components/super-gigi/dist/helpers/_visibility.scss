// -----------------------------------------------------------------------------
// Sometimes is usefull to show or hide something based on screen resolution
// You can achieve the same thing writing something like:
// +media-query(small)
//   display: none
// But in some project to have common classes that do that is better,
// for example in big table created by Angular (yes is our case :D),
// or if you want to use the compiled version of the grid
// -----------------------------------------------------------------------------

@mixin show-from($query: null) {
  @if $query == null {
    @warn 'show-from mixin must have a query value';
  }

  @if length($query) > 1 {
    @warn 'show-from must have only one value';
  } @else {
    @if $debug {
      content: 'show from #{$query}';
    }

    @include dry-it('show-from#{$query}') {
      display: none !important;

      @include media-query($query) {
        display: inherit !important;
      }
    }
  }
}

@mixin hide-from($query: null) {
  @if $query == null {
    @warn 'show-from mixin must have a query value';
  }

  @if length($query) > 1 {
    @warn 'hide-from must have only one value';
  } @else {
    @if $debug {
      content: 'hide from #{$query}';
    }

    @include dry-it('hide-from#{$query}') {
      display: inherit !important;

      @include media-query($query) {
        display: none !important;
      }
    }
  }
}

@mixin show-for($visibility: null) {
  @if $visibility == null {
    @warn 'show-for mixin must have a query value';
  } @else {
    @if $debug {
      content: 'show for #{$visibility}';
    }

    @include dry-it('show-for') {
      display: none !important;
    }


    @each $query in $visibility {
      @include dry-it('show-for#{$query}') {
        @include media-query($query, only) {
          display: inherit !important;
        }
      }
    }
  }
}

@mixin hide-for($visibility: null) {
  @if $visibility == null {
    @warn 'show-for mixin must have a query value';
  } @else {
    @if $debug {
      content: 'hide for #{$visibility}';
    }

    @include dry-it('hide-for') {
      display: inherit !important;
    }


    @each $query in $visibility {
      @include dry-it('hide-for#{$query}') {
        @include media-query($query, only) {
          display: none !important;
        }
      }
    }
  }
}

// Initializing $type variable
$type: '';

@if $use-classes {
  $type: '.';
} @else {
  $type: '%';
}


@function utility-class-name($util, $query, $only) {
  $name: #{$util}-for-#{$query}#{if($only, -only, -up)};

  @if $use-bem {
    $name: u-#{$util};
    @if $query != '' {
      $name: #{$name}\@#{$query}#{if($only, -only, '')};
    }
  }

  @return $name;
}


@each $query, $breakpoint in $breakpoints {
  #{$type}#{utility-class-name('show', $query, false)} {
    @include show-from($query);
  }

  #{$type}#{utility-class-name('hide', $query, false)} {
    @include hide-from($query);
  }

  #{$type}#{utility-class-name('show', $query, true)} {
    @include show-for($query);
  }

  #{$type}#{utility-class-name('hide', $query, true)} {
    @include hide-for($query);
  }
}

// sample
// .show-for-medium-up
//   +show-from(medium)
// .show-for-medium-up2
//   +show-from(medium)
// .show-for-medium-only
//   +show-for(medium)
// .show-for-1
//   +show-for((xsmall, medium, xlarge))
// .show-for-2
//   +show-for((xsmall, small, xlarge))

// .hide-for-medium-up
//   +hide-from(medium)
// .hide-for-medium-only
//   +hide-for(medium)
// .hide-for-xsmall-medium-xlarge
//   +hide-for((xsmall, medium, xlarge))
