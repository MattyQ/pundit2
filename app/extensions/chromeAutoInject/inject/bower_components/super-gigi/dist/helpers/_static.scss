// -----------------------------------------------------------------------------
// WE WILL GENERATE STATIC CSS CLASSES.
// WE WOULD PREFER THE MIXINS VERSION, BUT NOT IN EVERY PROJECT
// YOU CAN HAVE PRECOMPILERS...
// -----------------------------------------------------------------------------
// If you don't want to use classes we will generate placeholders
// that you can use like that:
// .class
//   @extend %row
// -----------------------------------------------------------------------------

$type: if($use-classes, '.', '%');


@function grid-class-name($prop, $query: '', $parent: '') {
  $name: #{$class-prefix}#{$prop};

  @if $use-bem {
    $name: #{$parent}#{$bem-separator}#{$prop};
    @if $query != '' {
      $name: #{$name}\@#{$query};
    }
  }

  @return $name;
}


// Row classes generator
@mixin row-generate-classes($query, $separator: '-') {
  $class-prefix: #{$type}#{$query}#{$separator} !global;

  @if $use-flex {
    // row modificators
    &#{grid-class-name(top, $query, &)} {
      align-items: flex-start;
    }

    &#{grid-class-name(middle, $query, &)} {
      align-items: center;
    }

    &#{grid-class-name(bottom, $query, &)} {
      align-items: flex-end;
    }

    &#{grid-class-name(baseline, $query, &)} {
      align-items: baseline;
    }

    &#{grid-class-name(stretch, $query, &)} {
      align-items: stretch;
    }

    &#{grid-class-name(start, $query, &)} {
      justify-content: flex-start;
    }

    &#{grid-class-name(center, $query, &)} {
      justify-content: center;
    }

    &#{grid-class-name(end, $query, &)} {
      justify-content: flex-end;
    }

    &#{grid-class-name(around, $query, &)} {
      justify-content: space-around;
    }

    &#{grid-class-name(between, $query, &)} {
      justify-content: space-between;
    }

    &#{grid-class-name(horizontal, $query, &)} {
      flex-direction: if($grid-start == left, row, row-reverse);
    }

    &#{grid-class-name(horizontal-reverse, $query, &)} {
      flex-direction: if($grid-start == left, row-reverse, row);
    }

    &#{grid-class-name(vertical, $query, &)} {
      flex: 1;
      flex-direction: column;
    }

    &#{grid-class-name(vertical-reverse, $query, &)} {
      flex: 1;
      flex-direction: column-reverse;
    }

    &#{grid-class-name(single-line, $query, &)} {
      flex-flow: nowrap;
    }
  }
}

// Column classes generator
@mixin column-generate-classes($query, $separator: '-') {
  $class-prefix: #{$type}#{$query}#{$separator} !global;

  //column modificators
  @if $use-flex and $use-classes {
    &#{grid-class-name(collapse, $query, &)} {
      padding: 0;
    }

    &#{grid-class-name(top, $query, &)} {
      align-self: flex-start;
    }

    &#{grid-class-name(middle, $query, &)} {
      align-self: center;
    }

    &#{grid-class-name(bottom, $query, &)} {
      align-self: flex-end;
    }

    &#{grid-class-name(baseline, $query, &)} {
      align-self: baseline;
    }

    &#{grid-class-name(stretch, $query, &)} {
      align-self: stretch;
    }

    &#{grid-class-name(auto, $query, &)} {
      flex: 1 1 0%;
      width: auto;
    }

    &#{grid-class-name(auto-reset, $query, &)} {
      flex: 0 0 auto;
    }
  }

  $q: if($query != '', ($query: auto), auto);
  &#{grid-class-name(auto, $query, &)} {
    @include grid-column($width: $q, $global: null);
  }

  $divider: if($use-bem, '', '-');

  @for $i from 0 through $grid-columns {
    $q: if($query != '', ($query: $i), $i);
    &#{grid-class-name(if($use-bem, span#{$i}, #{$i}), $query)} {
      @include grid-column($width: $q, $global: null);
    }

    &#{grid-class-name(offset#{$divider}#{$i}, $query)} {
      @include grid-column($offset: $q, $width: null, $global: null);
    }

    &#{grid-class-name(push#{$divider}#{$i}, $query)} {
      @include grid-column($push: $q, $width: null, $global: null);
    }

    &#{grid-class-name(pull#{$divider}#{$i}, $query)} {
      @include grid-column($pull: $q, $width: null, $global: null);
    }

    @if $use-flex {
      &#{grid-class-name(order#{$divider}#{$i}, $query)} {
        @include grid-column($order: $i, $width: null, $global: null);
      }
    }
  }
}

// -----------------------------------------------------------------------------
// ROW GENERATOR CLASSES
// -----------------------------------------------------------------------------

@if $use-classes or $use-placeholders {
  #{$type}#{$row-name} {
    @include grid-row(false);

    @include row-generate-classes('', '');

    #{$type}#{$row-name},
    &#{grid-class-name(nested)} {
      margin: 0 (-$column-gutter / 2);
      width: auto;
    }

    @each $query, $breakpoint in $breakpoints {
      @include media-query($query) {
        @include row-generate-classes(#{$query});
      }


      // Generate placeholders for dryer
      @if $use-classes == false {
        $eq-grid: if($eq-grid, false, true) !global;
        @include media-query($query) {
          @include row-generate-classes(#{$query});
        }
        $eq-grid: if($eq-grid, true, false) !global;
      }

    }
  }
}


// -----------------------------------------------------------------------------
// COLUMN GENERATOR CLASSES
// -----------------------------------------------------------------------------

@if $use-classes or $use-placeholders {
  #{$type}#{$column-name} {
    @include grid-column;

    @include column-generate-classes('', '');

    @each $query, $breakpoint in $breakpoints {
      @include media-query($query) {
        @include column-generate-classes(#{$query});
      }

      // Generate placeholders for dryer
      @if $use-classes == false {
        $eq-grid: if($eq-grid, false, true) !global;
        @include media-query($query) {
          @include column-generate-classes(#{$query});
        }
        $eq-grid: if($eq-grid, true, false) !global;
      }
    }
  }
}

